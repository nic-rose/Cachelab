#include "cachelab.h"
#include <stdlib.h>
#include <stdio.h>




int main(int argc, char * arg[]){
	int i;
	int verbose = 0;
	int numSet;
	int numLines;
	int bitSize;


	for(i = 1; i < argc; i++){
		
		switch(arg[i][1]){
			case 'h':
				printf("usage: ./csim-ref [-hv] -s <num> -E <num> -b <num> -t <file> \n");
				printf("Options: \n" );
				printf("-h         Print this help message. \n");
				printf("-v         Optional verbose flag. \n");
				printf("-s <num>   Number of set index bits. \n");
				printf("-E <num>   Number of lines per set. \n");
				printf("-b <num>   Number of block offset bits. \n");
				printf(" -t <file>  Trace file. \n");
				printf(" \n");
				printf("Examples: \n");
				printf("linux>  ./csim-ref -s 4 -E 1 -b 4 -t traces/yi.trace \n");
				printf("linux>  ./csim-ref -v -s 8 -E 2 -b 4 -t traces/yi.trace \n");
				break;
			case 'v':
				verbose = 1;
				if(i == argc){
					return 1;
				}
				break;
			case 's':
				numSet = 1 << atoi(arg[i+1]);
				if(i == argc){
					return 1;
				}
				i++;
				break;
			case 'E':
				numLines = i;
				if(i == argc){
					return 1;
				}
				i++;
				break;
			case 'b':
				bitSize = 1 << atoi(arg[i+1]);
				if(i == argc){
					return 1;
				}
				i++;
				break;
			case 't':
				if(i == argc){
					return 1;
				}
				break;
			default:
				printf("invalid flag: %s\n",arg[i]);
				return 1;
		}

	}
	if(verbose == 1){	
		if(numSet == 0){
			printf("s is not set:");
		}
		else{	
			printf("number of sets: %d\n",numSet);
		}
		if(numLines == 0){
			printf("E is not set:");
		}
		else{	
			printf("number of lines: %d\n",numLines);
		}
		if(bitSize == 0){
			printf("b is not set:");
		}
		else{	
			printf("Size of block : %d\n",numSet);
		}

	}
    printSummary(0, 0, 0);
    return 0;
}
